import get from 'lodash/get'
import each from 'lodash/each'
import map from 'lodash/map'
import size from 'lodash/size'
import join from 'lodash/join'
import split from 'lodash/split'
import dropRight from 'lodash/dropRight'
import isarr from './isarr.mjs'
import isestr from './isestr.mjs'
import strDiff from './strDiff.mjs'


function arrDiff1D(arrOld, arrNew, opt = {}) {

    //check
    if (!isarr(arrOld)) {
        return {}
    }
    if (!isarr(arrNew)) {
        return {}
    }

    //dlm
    let dlm = get(opt, 'dlm', '')
    if (!isestr(dlm)) {
        dlm = '\n'
    }

    //join
    let strOld = map(arrOld, (v) => {
        return `${v}${dlm}`
    })
    strOld = join(strOld, '')
    let strNew = map(arrNew, (v) => {
        return `${v}${dlm}`
    })
    strNew = join(strNew, '')

    //strDiff
    let r = strDiff(strOld, strNew, { ...opt, eliminateEndLine: true })

    return r
}


function arrDiff2D(arrOld, arrNew, opt = {}) {

    //check
    if (!isarr(arrOld)) {
        return {}
    }
    if (!isarr(arrNew)) {
        return {}
    }

    //dls
    let dls = get(opt, 'dls', '')
    if (!isestr(dls)) {
        dls = '⟋'
    }

    //dlq
    let dlq = get(opt, 'dlq', '')
    if (!isestr(dlq)) {
        dlq = '∶'
    }

    //dlm
    let dlm = get(opt, 'dlm', '')
    if (!isestr(dlm)) {
        dlm = '\n'
    }

    //strOld
    let strOld = []
    each(arrOld, (v, k) => {
        if (!isarr(v)) {
            console.log('arrOld', arrOld)
            console.log(k, v)
            throw new Error(`arrOld is not a matrix`)
        }
        each(v, (vv, kk) => {
            strOld.push(`${kk}${dlq}${vv}${dls}`) //得要靠kk區隔不同儲存格, 若無kk與有可能出現連續多儲存格為「有無」與「無有」, 導致判識仍為無變化
        })
        strOld.push(dlm)
    })
    strOld = join(strOld, '')
    // console.log('strOld', strOld)

    //strNew
    let strNew = []
    each(arrNew, (v, k) => {
        if (!isarr(v)) {
            console.log('arrNew', arrNew)
            console.log(k, v)
            throw new Error(`arrNew is not a matrix`)
        }
        each(v, (vv, kk) => {
            strNew.push(`${kk}${dlq}${vv}${dls}`) //得要靠kk區隔不同儲存格, 若無kk與有可能出現連續多儲存格為「有無」與「無有」, 導致判識仍為無變化
        })
        strNew.push(dlm)
    })
    strNew = join(strNew, '')
    // console.log('strNew', strNew)

    //strDiff
    let rt = strDiff(strOld, strNew, { ...opt, eliminateEndLine: true })
    // console.log('rt.diff', rt.diff)
    // console.log('rt.dfs', rt.dfs)

    //dfrs, dfcs
    let dfrs = []
    let dfcs = []
    each(rt.dfs, (r) => {

        //arrVo
        let arrVo = split(r.vo, dls)
        arrVo = dropRight(arrVo, 1)
        // console.log('vo', r.vo, 'arrVo', arrVo)

        //modify
        if (r.p === 'modify') {

            //arrVn
            let arrVn = split(r.vn, dls)
            arrVn = dropRight(arrVn, 1)
            // console.log('vn', r.vn, 'arrVn', arrVn)

            //row add dfs
            let rtt = arrDiff1D(arrVo, arrVn, opt)
            r.dfs = rtt.dfs

        }

        //cs
        let cs = []
        if (r.p === 'modify') {
            each(r.dfs, (v) => {
                cs.push(v)
            })
        }
        else { //add, remove
            each(arrVo, (v) => {
                cs.push({
                    p: r.p,
                    vo: v,
                    vn: '',
                })
            })
        }

        //push
        dfrs.push(r)
        dfcs.push(cs)

    })
    // console.log('dfrs', dfrs)
    // console.log('dfcs', dfcs)

    return {
        diff: rt.diff,
        dfrs,
        dfs: dfcs,
    }
}


/**
 * 比對新舊陣列差異處
 *
 * Unit Test: {@link https://github.com/yuda-lyu/wsemi/blob/master/test/arrDiff.test.mjs Github}
 * @memberOf wsemi
 * @param {Array} strOld 輸入原始數據陣列
 * @param {Array} strNew 輸入更新數據陣列
 * @param {Object} [opt={}] 輸入設定物件，預設{}
 * @param {String} [opt.mode='array'] 輸入數據維度字串，可選為'array'與'matrix'，預設'array'
 * @param {String} [opt.dlm='\n'] 輸入陣列各列間換行字串，預設'\n'
 * @param {String} [opt.dls='⟋'] 輸入若數據為矩陣時各儲存格分隔字串，預設'⟋'
 * @param {String} [opt.dlq='∶'] 輸入若數據為矩陣時各儲存格欄位指標分隔字串，預設'∶'
 * @returns {Object} 回傳比對結果物件，若為一維陣列則回傳鍵值diff與dfs，其中diff為比對原始結果字串，dfs為依照各列比對結果陣列；若為二維陣列則回傳鍵值diff、dfrs與dfs，其中diff一樣為比對原始結果字串，dfrs為各列比對結果陣列，dfs為各儲存格比對結果陣列
 * @example
 *
 * let r
 *
 * let arrOld = [-0.529408622, 0.839882385, 0.663059856, 0.49047221, 123, 0.395763265, 0.866151835]
 * let arrNew = [-0.529408622, 0.1839882385, 0.663059856, 0.49047221, 0.395763265, 45.6, 0.866151835]
 * r = arrDiff(arrOld, arrNew)
 * // console.log(r)
 * // => {
 * //   diff: 'Index: title\n' +
 * //     '===================================================================\n' +
 * //     '--- title\n' +
 * //     '+++ title\n' +
 * //     '@@ -1,7 +1,7 @@\n' +
 * //     ' -0.529408622\n' +
 * //     '-0.839882385\n' +
 * //     '+0.1839882385\n' +
 * //     ' 0.663059856\n' +
 * //     ' 0.49047221\n' +
 * //     '-123\n' +
 * //     ' 0.395763265\n' +
 * //     '+45.6\n' +
 * //     ' 0.866151835\n',
 * //   dfs: [
 * //     { p: '', vo: '-0.529408622', vn: '' },
 * //     { p: 'modify', vo: '0.839882385', vn: '0.1839882385' },
 * //     { p: '', vo: '0.663059856', vn: '' },
 * //     { p: '', vo: '0.49047221', vn: '' },
 * //     { p: 'remove', vo: '123', vn: '' },
 * //     { p: '', vo: '0.395763265', vn: '' },
 * //     { p: 'add', vo: '45.6', vn: '' },
 * //     { p: '', vo: '0.866151835', vn: '' },
 * //     { p: '', vo: '', vn: '' }
 * //   ]
 * // }
 *
 * let matOld = [
 *     [1, 0.974848293, 0.791303871, 0.716898185, 0.506002098, 0.137888903, 0.626724085],
 *     [2, -0.529408622, 0.839882385, 0.663059856, 0.49047221, 0.395763265, 0.866151835],
 *     [3, -0.10320217, 0.475514539, 0.969205779, 0.711250309, 0.153847069, 0.410092395],
 *     [4, -0.121479865, 0.486179086, 0.481023842, 0.467410582, 0.42602231, 0.849701641],
 *     [5, 0.757346003, 0.697242433, 0.67532802, 0.174644416, 0.045652267, 0.397104668],
 *     [6, 0.663032731, 0.259252779, 0.566177431, 0.679637706, 0.377814487, 0.400248119],
 *     [7, 0.72721374, 0.263793391, 0.167895215, 0.794808602, 0.107070584, 0.011822872],
 *     [8, 0.247416664, 0.360426795, 0.014346373, 0.000469616, 0.4082693, 0.913806611],
 *     [9, 0.345880037, 0.167996664, 0.711054429, 0.363177921, 0.206849994, 0.636855344],
 *     [10, 0.576739457, 0.324665077, 0.973218005, 0.883927423, 0.176906125, 0.20087887],
 *     [11, 1.2],
 *     [12, 23.5],
 *     [13, 0.504421248, 0.984003751, 0.32549507, 0.987090751, 0.192745589, 0.735133561],
 *     [14, 0.273214614, 0.083431884, 0.565146092, 0.935388666, 0.637675154, 0.523815661],
 * ]
 * let matNew = [
 *     [1, 0.974848293, 0.791303871, 0.716898185, 0.506002098, 0.137888903, 0.626724085],
 *     [2, -0.529408622, 0.1839882385, 0.663059856, 0.49047221, 0.395763265, 0.866151835],
 *     [3, -0.10320217, 0.475514539, 0.969205779, 0.711250309, 0.153847069, 0.410092395],
 *     [4, -0.121479865, 0.486179086, 0.481023842, 0.467410582, 0.42602231, 0.849701641],
 *     [5, 0.757346003, 0.697242433, 0.67532802, 0.174644416, 0.045652267, 0.397104668],
 *     [7, 0.72721374, 0.263793391, 0.167895215, 0.794808602, 0.107070584, 0.011822872],
 *     [8, 0.247416664, 0.360426795, 0.014346373, 0.000469616, 0.4082693, 0.913806611],
 *     [9, 0.345880037, 0.167996664, 0.711054429, 0.363173478, 0.636855344],
 *     [10, 0.576739457, 0.324665077, 0.973218005, 0.883927423, 0.176906125, 0.20087887],
 *     [13, 0.504421248, 0.984003751, 0.32549507, 0.987090751, 0.192745589, 0.735133561],
 *     [14, 0.273214614, 0.083431884, 0.565146092, 0.935388666, 0.637675154, 0.523815661],
 *     ['n1', 0.944492151, 0.89950443, 0.182709318, 0.892820757, 0.709746901, 0.097385354],
 *     ['n2', 0.769805921, 0.061355308, 0.314826137, 0.855857651, 0.653550539, 0.772500773],
 *     ['n3', 0.158739038, 0.085078711, 0.844664253, 0.21630142, 0.912931341, 0.735138313],
 * ]
 * r = arrDiff(matOld, matNew, { mode: 'matrix' })
 * console.log(r)
 * // => diff Index: title
 * // ===================================================================
 * // --- title
 * // +++ title
 * // @@ -1,14 +1,14 @@
 * //  1ߊ0.974848293ߊ0.791303871ߊ0.716898185ߊ0.506002098ߊ0.137888903ߊ0.626724085ߊ
 * // -2ߊ-0.529408622ߊ0.839882385ߊ0.663059856ߊ0.49047221ߊ0.395763265ߊ0.866151835ߊ
 * // +2ߊ-0.529408622ߊ0.1839882385ߊ0.663059856ߊ0.49047221ߊ0.395763265ߊ0.866151835ߊ
 * //  3ߊ-0.10320217ߊ0.475514539ߊ0.969205779ߊ0.711250309ߊ0.153847069ߊ0.410092395ߊ
 * //  4ߊ-0.121479865ߊ0.486179086ߊ0.481023842ߊ0.467410582ߊ0.42602231ߊ0.849701641ߊ
 * //  5ߊ0.757346003ߊ0.697242433ߊ0.67532802ߊ0.174644416ߊ0.045652267ߊ0.397104668ߊ
 * // -6ߊ0.663032731ߊ0.259252779ߊ0.566177431ߊ0.679637706ߊ0.377814487ߊ0.400248119ߊ
 * //  7ߊ0.72721374ߊ0.263793391ߊ0.167895215ߊ0.794808602ߊ0.107070584ߊ0.011822872ߊ
 * //  8ߊ0.247416664ߊ0.360426795ߊ0.014346373ߊ0.000469616ߊ0.4082693ߊ0.913806611ߊ
 * // -9ߊ0.345880037ߊ0.167996664ߊ0.711054429ߊ0.363177921ߊ0.206849994ߊ0.636855344ߊ
 * // +9ߊ0.345880037ߊ0.167996664ߊ0.711054429ߊ0.363173478ߊ0.636855344ߊ
 * //  10ߊ0.576739457ߊ0.324665077ߊ0.973218005ߊ0.883927423ߊ0.176906125ߊ0.20087887ߊ
 * // -11ߊ1.2ߊ
 * // -12ߊ23.5ߊ
 * //  13ߊ0.504421248ߊ0.984003751ߊ0.32549507ߊ0.987090751ߊ0.192745589ߊ0.735133561ߊ
 * //  14ߊ0.273214614ߊ0.083431884ߊ0.565146092ߊ0.935388666ߊ0.637675154ߊ0.523815661ߊ
 * // +n1ߊ0.944492151ߊ0.89950443ߊ0.182709318ߊ0.892820757ߊ0.709746901ߊ0.097385354ߊ
 * // +n2ߊ0.769805921ߊ0.061355308ߊ0.314826137ߊ0.855857651ߊ0.653550539ߊ0.772500773ߊ
 * // +n3ߊ0.158739038ߊ0.085078711ߊ0.844664253ߊ0.21630142ߊ0.912931341ߊ0.735138313ߊ
 * for (let i = 0; i < r.dfs.length; i++) {
 *     let df = r.dfs[i]
 *     console.log(i, 'df', df)
 * }
 * // => 0 df [
 * //   { p: '', vo: '1', vn: '' },
 * //   { p: '', vo: '0.974848293', vn: '' },
 * //   { p: '', vo: '0.791303871', vn: '' },
 * //   { p: '', vo: '0.716898185', vn: '' },
 * //   { p: '', vo: '0.506002098', vn: '' },
 * //   { p: '', vo: '0.137888903', vn: '' },
 * //   { p: '', vo: '0.626724085', vn: '' },
 * //   { p: '', vo: '', vn: '' }
 * // ]
 * // 1 df [
 * //   { p: '', vo: '2', vn: '' },
 * //   { p: '', vo: '-0.529408622', vn: '' },
 * //   { p: 'modify', vo: '0.839882385', vn: '0.1839882385' },
 * //   { p: '', vo: '0.663059856', vn: '' },
 * //   { p: '', vo: '0.49047221', vn: '' },
 * //   { p: '', vo: '0.395763265', vn: '' },
 * //   { p: '', vo: '0.866151835', vn: '' },
 * //   { p: '', vo: '', vn: '' }
 * // ]
 * // 2 df [
 * //   { p: '', vo: '3', vn: '' },
 * //   { p: '', vo: '-0.10320217', vn: '' },
 * //   { p: '', vo: '0.475514539', vn: '' },
 * //   { p: '', vo: '0.969205779', vn: '' },
 * //   { p: '', vo: '0.711250309', vn: '' },
 * //   { p: '', vo: '0.153847069', vn: '' },
 * //   { p: '', vo: '0.410092395', vn: '' },
 * //   { p: '', vo: '', vn: '' }
 * // ]
 * // 3 df [
 * //   { p: '', vo: '4', vn: '' },
 * //   { p: '', vo: '-0.121479865', vn: '' },
 * //   { p: '', vo: '0.486179086', vn: '' },
 * //   { p: '', vo: '0.481023842', vn: '' },
 * //   { p: '', vo: '0.467410582', vn: '' },
 * //   { p: '', vo: '0.42602231', vn: '' },
 * //   { p: '', vo: '0.849701641', vn: '' },
 * //   { p: '', vo: '', vn: '' }
 * // ]
 * // 4 df [
 * //   { p: '', vo: '5', vn: '' },
 * //   { p: '', vo: '0.757346003', vn: '' },
 * //   { p: '', vo: '0.697242433', vn: '' },
 * //   { p: '', vo: '0.67532802', vn: '' },
 * //   { p: '', vo: '0.174644416', vn: '' },
 * //   { p: '', vo: '0.045652267', vn: '' },
 * //   { p: '', vo: '0.397104668', vn: '' },
 * //   { p: '', vo: '', vn: '' }
 * // ]
 * // 5 df [
 * //   { p: 'remove', vo: '6', vn: '' },
 * //   { p: 'remove', vo: '0.663032731', vn: '' },
 * //   { p: 'remove', vo: '0.259252779', vn: '' },
 * //   { p: 'remove', vo: '0.566177431', vn: '' },
 * //   { p: 'remove', vo: '0.679637706', vn: '' },
 * //   { p: 'remove', vo: '0.377814487', vn: '' },
 * //   { p: 'remove', vo: '0.400248119', vn: '' },
 * //   { p: 'remove', vo: '', vn: '' }
 * // ]
 * // 6 df [
 * //   { p: '', vo: '7', vn: '' },
 * //   { p: '', vo: '0.72721374', vn: '' },
 * //   { p: '', vo: '0.263793391', vn: '' },
 * //   { p: '', vo: '0.167895215', vn: '' },
 * //   { p: '', vo: '0.794808602', vn: '' },
 * //   { p: '', vo: '0.107070584', vn: '' },
 * //   { p: '', vo: '0.011822872', vn: '' },
 * //   { p: '', vo: '', vn: '' }
 * // ]
 * // 7 df [
 * //   { p: '', vo: '8', vn: '' },
 * //   { p: '', vo: '0.247416664', vn: '' },
 * //   { p: '', vo: '0.360426795', vn: '' },
 * //   { p: '', vo: '0.014346373', vn: '' },
 * //   { p: '', vo: '0.000469616', vn: '' },
 * //   { p: '', vo: '0.4082693', vn: '' },
 * //   { p: '', vo: '0.913806611', vn: '' },
 * //   { p: '', vo: '', vn: '' }
 * // ]
 * // 8 df [
 * //   { p: '', vo: '9', vn: '' },
 * //   { p: '', vo: '0.345880037', vn: '' },
 * //   { p: '', vo: '0.167996664', vn: '' },
 * //   { p: '', vo: '0.711054429', vn: '' },
 * //   { p: 'remove', vo: '0.363177921', vn: '' },
 * //   { p: 'modify', vo: '0.206849994', vn: '0.363173478' },
 * //   { p: '', vo: '0.636855344', vn: '' },
 * //   { p: '', vo: '', vn: '' },
 * //   { p: '', vo: '', vn: '' }
 * // ]
 * // 9 df [
 * //   { p: '', vo: '10', vn: '' },
 * //   { p: '', vo: '0.576739457', vn: '' },
 * //   { p: '', vo: '0.324665077', vn: '' },
 * //   { p: '', vo: '0.973218005', vn: '' },
 * //   { p: '', vo: '0.883927423', vn: '' },
 * //   { p: '', vo: '0.176906125', vn: '' },
 * //   { p: '', vo: '0.20087887', vn: '' },
 * //   { p: '', vo: '', vn: '' }
 * // ]
 * // 10 df [
 * //   { p: 'remove', vo: '11', vn: '' },
 * //   { p: 'remove', vo: '1.2', vn: '' },
 * //   { p: 'remove', vo: '', vn: '' }
 * // ]
 * // 11 df [
 * //   { p: 'remove', vo: '12', vn: '' },
 * //   { p: 'remove', vo: '23.5', vn: '' },
 * //   { p: 'remove', vo: '', vn: '' }
 * // ]
 * // 12 df [
 * //   { p: '', vo: '13', vn: '' },
 * //   { p: '', vo: '0.504421248', vn: '' },
 * //   { p: '', vo: '0.984003751', vn: '' },
 * //   { p: '', vo: '0.32549507', vn: '' },
 * //   { p: '', vo: '0.987090751', vn: '' },
 * //   { p: '', vo: '0.192745589', vn: '' },
 * //   { p: '', vo: '0.735133561', vn: '' },
 * //   { p: '', vo: '', vn: '' }
 * // ]
 * // 13 df [
 * //   { p: '', vo: '14', vn: '' },
 * //   { p: '', vo: '0.273214614', vn: '' },
 * //   { p: '', vo: '0.083431884', vn: '' },
 * //   { p: '', vo: '0.565146092', vn: '' },
 * //   { p: '', vo: '0.935388666', vn: '' },
 * //   { p: '', vo: '0.637675154', vn: '' },
 * //   { p: '', vo: '0.523815661', vn: '' },
 * //   { p: '', vo: '', vn: '' }
 * // ]
 * // 14 df [
 * //   { p: 'add', vo: 'n1', vn: '' },
 * //   { p: 'add', vo: '0.944492151', vn: '' },
 * //   { p: 'add', vo: '0.89950443', vn: '' },
 * //   { p: 'add', vo: '0.182709318', vn: '' },
 * //   { p: 'add', vo: '0.892820757', vn: '' },
 * //   { p: 'add', vo: '0.709746901', vn: '' },
 * //   { p: 'add', vo: '0.097385354', vn: '' },
 * //   { p: 'add', vo: '', vn: '' }
 * // ]
 * // 15 df [
 * //   { p: 'add', vo: 'n2', vn: '' },
 * //   { p: 'add', vo: '0.769805921', vn: '' },
 * //   { p: 'add', vo: '0.061355308', vn: '' },
 * //   { p: 'add', vo: '0.314826137', vn: '' },
 * //   { p: 'add', vo: '0.855857651', vn: '' },
 * //   { p: 'add', vo: '0.653550539', vn: '' },
 * //   { p: 'add', vo: '0.772500773', vn: '' },
 * //   { p: 'add', vo: '', vn: '' }
 * // ]
 * // 16 df [
 * //   { p: 'add', vo: 'n3', vn: '' },
 * //   { p: 'add', vo: '0.158739038', vn: '' },
 * //   { p: 'add', vo: '0.085078711', vn: '' },
 * //   { p: 'add', vo: '0.844664253', vn: '' },
 * //   { p: 'add', vo: '0.21630142', vn: '' },
 * //   { p: 'add', vo: '0.912931341', vn: '' },
 * //   { p: 'add', vo: '0.735138313', vn: '' },
 * //   { p: 'add', vo: '', vn: '' }
 * // ]
 * // 17 df [ { p: '', vo: '', vn: '' } ]
 *
 */
function arrDiff(arrOld, arrNew, opt = {}) {

    //check
    if (!isarr(arrOld)) {
        return {}
    }
    if (!isarr(arrNew)) {
        return {}
    }
    if (size(arrOld) === 0 && size(arrNew) === 0) {
        return {}
    }

    //mode
    let mode = get(opt, 'mode', '')
    if (mode !== 'array' && mode !== 'matrix') {
        mode = 'array'
    }

    let r
    if (mode === 'array') {
        r = arrDiff1D(arrOld, arrNew, opt)
    }
    else if (mode === 'matrix') {
        r = arrDiff2D(arrOld, arrNew, opt)
    }

    return r
}


export default arrDiff
