import assert from 'assert'
import replace from '../src/replace.mjs'
import b642u8arr from '../src/b642u8arr.mjs'
import getDataFromExcelFileU8Arr from '../src/getDataFromExcelFileU8Arr.mjs'


describe(`getDataFromExcelFileU8Arr`, function() {

    let c = ``
    let u8a = b642u8arr(c)
    //let u8a = fs.readFileSync(`fn.xlsx`)

    let k
    let o = {}

    k = 0
    o[k] = {
        in: { fmt: 'ltdt' },
        out: {
            id: '2',
            proj_no: '93002815',
            hole_no: 'BH-1',
            top_depth: '23',
            bottom_depth: '25',
            core_shape1: 'false',
            core_shape2: 'false',
            core_shape3: 'false',
            core_shape4: 'true',
            core_shape5: 'true',
            core_shape6: 'true',
            core_shape7: 'true',
            core_shape8: 'false'
        }
    }
    it(`should return ${JSON.stringify(o[k].out)} when input ${JSON.stringify(o[k].in)}`, function() {
        let k = 0
        let r = getDataFromExcelFileU8Arr(u8a, o[k].in)
        r = r[0].data[1]
        assert.strict.deepStrictEqual(r, o[k].out)
    })

    k = 1
    o[k] = {
        in: { fmt: 'ltdt', valueToString: false },
        out: {
            id: 2,
            proj_no: 93002815,
            hole_no: 'BH-1',
            top_depth: 23,
            bottom_depth: 25,
            core_shape1: false,
            core_shape2: false,
            core_shape3: false,
            core_shape4: true,
            core_shape5: true,
            core_shape6: true,
            core_shape7: true,
            core_shape8: false
        }
    }
    it(`should return ${JSON.stringify(o[k].out)} when input ${JSON.stringify(o[k].in)}`, function() {
        let k = 1
        let r = getDataFromExcelFileU8Arr(u8a, o[k].in)
        r = r[0].data[1]
        assert.strict.deepStrictEqual(r, o[k].out)
    })

    k = 2
    o[k] = {
        in: { fmt: 'csv' },
        out: `"id","proj_no","hole_no","top_depth","bottom_depth","core_shape1","core_shape2","core_shape3","core_shape4","core_shape5","core_shape6","core_shape7","core_shape8"
"1","61602905740006","BH-6","0","1","false","false","false","false","false","false","false","false"
"2","93002815","BH-1","23","25","false","false","false","true","true","true","true","false"`
    }
    it(`should return ${JSON.stringify(o[k].out)} when input ${JSON.stringify(o[k].in)}`, function() {
        let k = 2
        let r = getDataFromExcelFileU8Arr(u8a, o[k].in)
        r = replace(r[0].data, '\r\n', '\n')
        assert.strict.deepStrictEqual(r, o[k].out)
    })

    k = 3
    o[k] = {
        in: { fmt: 'csv', valueToString: false },
        out: `id,proj_no,hole_no,top_depth,bottom_depth,core_shape1,core_shape2,core_shape3,core_shape4,core_shape5,core_shape6,core_shape7,core_shape8
1,61602905740006,BH-6,0,1,false,false,false,false,false,false,false,false
2,93002815,BH-1,23,25,false,false,false,true,true,true,true,false`
    }
    it(`should return ${JSON.stringify(o[k].out)} when input ${JSON.stringify(o[k].in)}`, function() {
        let k = 3
        let r = getDataFromExcelFileU8Arr(u8a, o[k].in)
        r = replace(r[0].data, '\r\n', '\n')
        assert.strict.deepStrictEqual(r, o[k].out)
    })

    k = 4
    o[k] = {
        in: { fmt: 'array' },
        out: [
            '1', '61602905740006',
            'BH-6', '0',
            '1', 'false',
            'false', 'false',
            'false', 'false',
            'false', 'false',
            'false'
        ]
    }
    it(`should return ${JSON.stringify(o[k].out)} when input ${JSON.stringify(o[k].in)}`, function() {
        let k = 4
        let r = getDataFromExcelFileU8Arr(u8a, o[k].in)
        r = r[0].data[1]
        assert.strict.deepStrictEqual(r, o[k].out)
    })

    k = 5
    o[k] = {
        in: { fmt: 'array', valueToString: false },
        out: [
            1, 61602905740006,
            'BH-6', 0,
            1, false,
            false, false,
            false, false,
            false, false,
            false
        ]
    }
    it(`should return ${JSON.stringify(o[k].out)} when input ${JSON.stringify(o[k].in)}`, function() {
        let k = 5
        let r = getDataFromExcelFileU8Arr(u8a, o[k].in)
        r = r[0].data[1]
        assert.strict.deepStrictEqual(r, o[k].out)
    })

})
